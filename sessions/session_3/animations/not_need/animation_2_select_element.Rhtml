<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Animation 2: html_element()</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            background-color: #f0f2f5;
            margin: 0;
            overflow: hidden;
        }
        .header {
            width: 950px;
            text-align: center;
            margin-bottom: 20px;
            padding: 15px;
            background-color: white;
            border-radius: 12px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.07);
            transition: background-color 0.5s ease-in-out;
        }
        .info-text {
            font-size: 24px;
            font-weight: 600;
            color: #1a202c;
            transition: color 0.5s ease-in-out;
        }
        .scene {
            width: 950px;
            height: 400px;
            display: grid;
            grid-template-columns: 1fr 1fr;
            align-items: center;
            gap: 25px;
            position: relative;
        }
        .panel {
            background-color: white;
            border-radius: 12px;
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.08);
            padding: 20px;
            height: 380px;
            display: flex;
            flex-direction: column;
            justify-content: flex-start;
            align-items: center;
            position: relative;
        }
        .panel h3 {
            margin: 0 0 15px 0;
            color: #4a5568;
            font-size: 16px;
            font-weight: 600;
            width: 100%;
            text-align: left;
        }
        /* Rendered Page Styling */
        .rendered-page-container {
            width: 100%;
            height: 100%;
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            padding: 15px;
            background-color: #fdfdff;
            text-align: left;
        }
        .rendered-page-container h1 {
            font-size: 1.2em;
            margin: 0 0 10px 0;
            transition: all 0.3s ease;
            border-radius: 4px;
            padding: 5px;
        }
        .rendered-page-container h1.highlight {
            background-color: #fefcbf; /* yellow highlight */
            box-shadow: 0 0 15px #fefcbf;
        }
        .rendered-page-container p {
            font-size: 0.9em;
            line-height: 1.5;
        }
        /* R Environment Styling */
        .r-env-container {
            font-family: 'Fira Code', 'Courier New', monospace;
            font-size: 15px;
        }
        .r-object {
            background-color: #ebf8ff;
            border: 1px solid #bee3f8;
            border-radius: 6px;
            padding: 10px;
            margin-bottom: 10px;
        }
        #r-variable-title {
            opacity: 0; /* Start hidden */
            transform: translateY(20px);
            transition: opacity 0.5s ease, transform 0.5s ease;
        }
        #r-variable-title.show {
            opacity: 1;
            transform: translateY(0);
        }
        /* Flying Text for animation */
        #flying-text {
            position: absolute;
            font-size: 1.2em;
            font-weight: bold;
            padding: 5px;
            background: #fefcbf;
            border-radius: 4px;
            z-index: 100;
            opacity: 0; /* Start hidden */
            white-space: nowrap;
        }
        .button {
            margin-top: 20px;
            padding: 12px 25px;
            font-size: 16px;
            font-weight: 600;
            color: white;
            background-color: #007bff;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }
        .button:disabled {
            background-color: #a0aec0;
            cursor: not-allowed;
        }
    </style>
</head>
<body>
    <div class="header">
        <div id="info-text" class="info-text">Click "Start Animation" to begin</div>
    </div>

    <div class="scene">
        <div id="panel-source" class="panel">
            <h3>Rendered HTML Page</h3>
            <div class="rendered-page-container">
                <h1 id="target-h1">Iowa Corn Production (Fake Data)</h1>
                <p>Welcome! This page displays fictional data about corn production...</p>
            </div>
        </div>

        <div id="panel-env" class="panel">
            <h3>R Environment</h3>
            <div class="r-env-container">
                <div class="r-object">
                    <strong>page</strong> [list]
                </div>
                <div id="r-variable-title" class="r-object">
                    <strong>title</strong> [chr] "Iowa Corn Production (Fake Data)"
                </div>
            </div>
        </div>
    </div>
    
    <div id="flying-text">Iowa Corn Production (Fake Data)</div>
    <button id="start-button" class="button">Start Animation</button>

    <script>
        const startButton = document.getElementById('start-button');
        const infoText = document.getElementById('info-text');
        const header = document.querySelector('.header');
        
        const targetH1 = document.getElementById('target-h1');
        const rVariableTitle = document.getElementById('r-variable-title');
        const flyingText = document.getElementById('flying-text');

        const stepColors = {
            text: ["#2c5282", "#2c5282", "#2c5282", "#2c5282"],
            bg: ["#bee3f8", "#bee3f8", "#bee3f8", "#bee3f8"]
        };

        function updateHeaderText(step, text) {
            infoText.innerText = text;
            infoText.style.color = stepColors.text[step - 1];
            header.style.backgroundColor = stepColors.bg[step - 1];
        }

        function resetState() {
            startButton.disabled = false;
            startButton.innerText = "Restart Animation";
            updateHeaderText(1, 'Click "Restart Animation" to see it again');
            
            targetH1.classList.remove('highlight');
            rVariableTitle.classList.remove('show');
            flyingText.style.animation = 'none';
            flyingText.style.opacity = '0';
        }

        function runAnimation() {
            startButton.disabled = true;
            startButton.innerText = "Animating...";
            
            // Clear previous states
            targetH1.classList.remove('highlight');
            rVariableTitle.classList.remove('show');
            flyingText.style.animation = 'none';
            void flyingText.offsetWidth; // Trigger reflow

            // Step 1: Show Code
            setTimeout(() => {
                const code = '`title <- page %>% html_element("h1") %>% html_text()`';
                updateHeaderText(1, `Step 1: Select the <h1> and extract its text`);
            }, 500);

            // Step 2: Highlight h1
            setTimeout(() => {
                updateHeaderText(2, `Step 2: The <h1> element is targeted...`);
                targetH1.classList.add('highlight');
            }, 2500);

            // Step 3: Animate the text extraction
            setTimeout(() => {
                updateHeaderText(3, `Step 3: ...and its text content is extracted.`);
                const h1Rect = targetH1.getBoundingClientRect();
                const envRect = rVariableTitle.getBoundingClientRect();

                flyingText.style.left = `${h1Rect.left}px`;
                flyingText.style.top = `${h1Rect.top}px`;
                flyingText.style.opacity = '1';
                flyingText.style.animation = `flyToEnv 2s ease-in-out forwards`;
                
                // Dynamically create keyframes
                const styleSheet = document.getElementById('animation-styles') || document.createElement("style");
                styleSheet.id = 'animation-styles';
                styleSheet.innerText = `
                    @keyframes flyToEnv {
                        0% {
                            transform: translate(0, 0) scale(1);
                            opacity: 1;
                        }
                        100% {
                            transform: translate(${envRect.left - h1Rect.left}px, ${envRect.top - h1Rect.top}px) scale(0.5);
                            opacity: 0;
                        }
                    }
                `;
                document.head.appendChild(styleSheet);
            }, 4500);
            
            // Step 4: Show R variable
            setTimeout(() => {
                updateHeaderText(4, `Step 4: The text is stored in a new R variable.`);
                rVariableTitle.classList.add('show');
            }, 6500);

            // End of animation
            setTimeout(() => {
                resetState();
            }, 9000);
        }

        startButton.addEventListener('click', runAnimation);
    </script>
</body>
</html>