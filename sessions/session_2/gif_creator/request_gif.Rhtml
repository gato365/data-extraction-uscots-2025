<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>API Data Flow: Client ⇄ API ⇄ Server ⇄ Database</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            overflow: hidden;
        }

        .component {
            box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
            transition: all 0.25s ease-in-out;
            border-width: 3px; /* Set a base border width */
        }
        
        /* Base state for animated dots */
        .dot {
            offset-path: var(--path);
            animation: move 4s ease-in-out infinite;
            animation-play-state: paused; /* Start paused */
            opacity: 0; /* Start invisible */
            position: absolute; 
            top: 0;
            left: 0;
            width: 16px;
            height: 16px;
            border-radius: 50%;
            transform: translate(-50%, -50%); /* Center the dot on the path */
        }
        
        /* Base state for paths */
        .flow-path {
            stroke-dasharray: 1000;
            stroke-dashoffset: 1000;
            animation: draw 2s ease-in-out forwards;
            animation-play-state: paused;
        }

        /* Animation Keyframes */
        @keyframes move {
            0% {
                offset-distance: 0%;
                opacity: 1;
            }
            90% {
                opacity: 1;
            }
            100% {
                offset-distance: 100%;
                opacity: 0;
            }
        }

        @keyframes draw {
            to {
                stroke-dashoffset: 0;
            }
        }

        /* Animation Control Classes */
        .animate-request .request-dot {
            animation-name: move;
            animation-play-state: running;
            animation-duration: 4s;
            animation-timing-function: ease-in-out;
            animation-iteration-count: 1; /* Run once per cycle */
        }

        .animate-request .request-path {
            animation-name: draw;
            animation-play-state: running;
            animation-duration: 2s;
            animation-timing-function: ease-in-out;
            animation-iteration-count: 1;
        }

        .animate-response .response-dot {
            animation-name: move;
            animation-play-state: running;
            animation-duration: 4s;
            animation-timing-function: ease-in-out;
            animation-iteration-count: 1;
        }
        
        .animate-response .response-path {
            animation-name: draw;
            animation-play-state: running;
            animation-duration: 2s;
            animation-timing-function: ease-in-out;
            animation-iteration-count: 1;
        }
        
        /* Highlighting active components - MORE EMPHASIS! */
        .highlight {
            transform: scale(1.12); /* Increased scale */
            border-color: #60a5fa; /* Brighter blue-400 */
            box-shadow: 0 0 25px 5px rgba(59, 130, 246, 0.5); /* Added glow effect */
        }
        
        .highlight-response {
            transform: scale(1.12); /* Increased scale */
            border-color: #34d399; /* Brighter emerald-400 */
            box-shadow: 0 0 25px 5px rgba(16, 185, 129, 0.5); /* Added glow effect */
        }

    </style>
</head>
<body class="bg-gray-50 flex items-center justify-center min-h-screen">

    <div class="w-full max-w-5xl mx-auto p-4 md:p-8">
        <div class="relative">
            <!-- Main Title -->
            <h1 class="text-2xl md:text-3xl font-bold text-center text-gray-800 mb-4">API Data Flow</h1>
            <h2 id="status-text" class="text-lg md:text-xl text-center text-gray-600 mb-12 h-8 transition-opacity duration-500">Initializing...</h2>

            <!-- SVG Container for Arrows -->
            <svg id="svg-container" width="100%" height="200" class="absolute top-0 left-0" style="z-index: 0; margin-top: 120px;">
                <defs>
                    <!-- Arrowhead for Request Path -->
                    <marker id="arrow-request" viewBox="0 0 10 10" refX="5" refY="5" markerWidth="6" markerHeight="6" orient="auto-start-reverse">
                        <path d="M 0 0 L 10 5 L 0 10 z" fill="#3b82f6"></path>
                    </marker>
                    <!-- Arrowhead for Response Path -->
                    <marker id="arrow-response" viewBox="0 0 10 10" refX="5" refY="5" markerWidth="6" markerHeight="6" orient="auto-start-reverse">
                        <path d="M 0 0 L 10 5 L 0 10 z" fill="#10b981"></path>
                    </marker>
                </defs>
                <!-- Request Path (Top) -->
                <path id="request-path-line" class="flow-path request-path" d="" stroke="#3b82f6" stroke-width="3" fill="none" marker-end="url(#arrow-request)"></path>
                <!-- Response Path (Bottom) -->
                <path id="response-path-line" class="flow-path response-path" d="" stroke="#10b981" stroke-width="3" fill="none" marker-end="url(#arrow-response)"></path>
                
                 <!-- Animated dots -->
                <div id="request-dot-container" style="--path: path('M 0 0');" class="dot request-dot bg-blue-500"></div>
                <div id="response-dot-container" style="--path: path('M 0 0');" class="dot response-dot bg-emerald-500"></div>
            </svg>

            <!-- Components Layout -->
            <div id="components-grid" class="relative grid grid-cols-4 gap-4 md:gap-8 items-center" style="z-index: 1; margin-top: 120px;">
                <!-- Client -->
                <div id="client" class="component bg-white p-4 rounded-lg border-transparent text-center">
                    <div class="flex justify-center mb-2">
                        <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-blue-600"><rect x="2" y="3" width="20" height="14" rx="2" ry="2"></rect><line x1="8" y1="21" x2="16" y2="21"></line><line x1="12" y1="17" x2="12" y2="21"></line></svg>
                    </div>
                    <h3 class="font-semibold text-gray-700">Client</h3>
                    <p class="text-sm text-gray-500">(e.g., Browser)</p>
                </div>
                <!-- API -->
                <div id="api" class="component bg-white p-4 rounded-lg border-transparent text-center">
                    <div class="flex justify-center mb-2">
                         <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-purple-600"><polyline points="16 18 22 12 16 6"></polyline><polyline points="8 6 2 12 8 18"></polyline></svg>
                    </div>
                    <h3 class="font-semibold text-gray-700">API</h3>
                     <p class="text-sm text-gray-500">(Endpoint)</p>
                </div>
                <!-- Server -->
                <div id="server" class="component bg-white p-4 rounded-lg border-transparent text-center">
                    <div class="flex justify-center mb-2">
                       <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-orange-600"><rect x="2" y="2" width="20" height="8" rx="2" ry="2"></rect><rect x="2" y="14" width="20" height="8" rx="2" ry="2"></rect><line x1="6" y1="6" x2="6.01" y2="6"></line><line x1="6" y1="18" x2="6.01" y2="18"></line></svg>
                    </div>
                    <h3 class="font-semibold text-gray-700">Server</h3>
                    <p class="text-sm text-gray-500">(Backend Logic)</p>
                </div>
                <!-- Database -->
                <div id="database" class="component bg-white p-4 rounded-lg border-transparent text-center">
                    <div class="flex justify-center mb-2">
                        <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-green-600"><ellipse cx="12" cy="5" rx="9" ry="3"></ellipse><path d="M21 12c0 1.66-4 3-9 3s-9-1.34-9-3"></path><path d="M3 5v14c0 1.66 4 3 9 3s9-1.34 9-3V5"></path></svg>
                    </div>
                    <h3 class="font-semibold text-gray-700">Database</h3>
                    <p class="text-sm text-gray-500">(Storage)</p>
                </div>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const clientEl = document.getElementById('client');
            const apiEl = document.getElementById('api');
            const serverEl = document.getElementById('server');
            const databaseEl = document.getElementById('database');
            const statusText = document.getElementById('status-text');
            
            const requestPathLine = document.getElementById('request-path-line');
            const responsePathLine = document.getElementById('response-path-line');
            const requestDotContainer = document.getElementById('request-dot-container');
            const responseDotContainer = document.getElementById('response-dot-container');
            const svgContainer = document.getElementById('svg-container');
            
            const components = [clientEl, apiEl, serverEl, databaseEl];

            // This function calculates and sets the SVG path strings
            function updatePaths() {
                const svgRect = svgContainer.getBoundingClientRect();

                const getCenter = (el) => {
                    const rect = el.getBoundingClientRect();
                    // Adjust coordinates to be relative to the SVG container
                    return {
                        x: rect.left + rect.width / 2 - svgRect.left,
                        y: rect.top + rect.height / 2 - svgRect.top
                    };
                };

                const clientCenter = getCenter(clientEl);
                const apiCenter = getCenter(apiEl);
                const serverCenter = getCenter(serverEl);
                const databaseCenter = getCenter(databaseEl);

                const yOffsetTop = -30; // Vertical offset for the top (request) path
                const yOffsetBottom = 30; // Vertical offset for the bottom (response) path

                // Construct Request Path (smooth curve)
                const requestD = `M ${clientCenter.x} ${clientCenter.y + yOffsetTop} C ${clientCenter.x + 50} ${clientCenter.y + yOffsetTop}, ${apiCenter.x - 50} ${apiCenter.y + yOffsetTop}, ${apiCenter.x} ${apiCenter.y + yOffsetTop} S ${serverCenter.x - 50} ${serverCenter.y + yOffsetTop}, ${serverCenter.x} ${serverCenter.y + yOffsetTop} S ${databaseCenter.x - 50} ${databaseCenter.y + yOffsetTop}, ${databaseCenter.x} ${databaseCenter.y + yOffsetTop}`;
                requestPathLine.setAttribute('d', requestD);
                requestDotContainer.style.setProperty('--path', `path('${requestD}')`);


                // Construct Response Path (smooth curve)
                const responseD = `M ${databaseCenter.x} ${databaseCenter.y + yOffsetBottom} C ${databaseCenter.x - 50} ${databaseCenter.y + yOffsetBottom}, ${serverCenter.x + 50} ${serverCenter.y + yOffsetBottom}, ${serverCenter.x} ${serverCenter.y + yOffsetBottom} S ${apiCenter.x + 50} ${apiCenter.y + yOffsetBottom}, ${apiCenter.x} ${apiCenter.y + yOffsetBottom} S ${clientCenter.x + 50} ${clientCenter.y + yOffsetBottom}, ${clientCenter.x} ${clientCenter.y + yOffsetBottom}`;
                responsePathLine.setAttribute('d', responseD);
                responseDotContainer.style.setProperty('--path', `path('${responseD}')`);

            }
            
            // Function to reset all animations and highlights
            function resetAnimation() {
                document.body.classList.remove('animate-request', 'animate-response');
                components.forEach(c => c.classList.remove('highlight', 'highlight-response'));
                [requestPathLine, responsePathLine].forEach(p => {
                    p.style.strokeDashoffset = '1000';
                    p.style.animation = 'none';
                });
                 [requestDotContainer, responseDotContainer].forEach(d => {
                    d.style.animation = 'none';
                    d.style.opacity = '0';
                });
                
                // Force reflow to allow animations to be re-applied
                void requestPathLine.offsetWidth;
                void responsePathLine.offsetWidth;
                void requestDotContainer.offsetWidth;
                void responseDotContainer.offsetWidth;
            }


            // Animation cycle
            function runAnimationCycle() {
                resetAnimation();
                
                // Phase 1: Request
                setTimeout(() => {
                    statusText.textContent = 'Client makes a request...';
                    statusText.style.opacity = '1';
                    document.body.classList.add('animate-request');
                    clientEl.classList.add('highlight');

                    // Set up individual component highlights
                    setTimeout(() => apiEl.classList.add('highlight'), 1000);
                    setTimeout(() => serverEl.classList.add('highlight'), 2000);
                    setTimeout(() => databaseEl.classList.add('highlight'), 3000);
                }, 100);

                // Phase 2: Response
                setTimeout(() => {
                    resetAnimation();
                    statusText.textContent = 'Server provides a response...';
                    document.body.classList.add('animate-response');
                    databaseEl.classList.add('highlight-response');

                     // Set up individual component highlights for response
                    setTimeout(() => serverEl.classList.add('highlight-response'), 1000);
                    setTimeout(() => apiEl.classList.add('highlight-response'), 2000);
                    setTimeout(() => clientEl.classList.add('highlight-response'), 3000);

                }, 5000); // Start response phase after 5 seconds

                 // Phase 3: Loop
                setTimeout(runAnimationCycle, 10000); // Restart the whole cycle every 10 seconds
            }

            // Initial setup
            updatePaths();
            runAnimationCycle();

            // Recalculate paths on window resize
            window.addEventListener('resize', updatePaths);
        });
    </script>
</body>
</html>
